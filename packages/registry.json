[
    {
        "id": "50dd3bd392e226e0",
        "type": "subflow",
        "name": "Registry",
        "info": "",
        "category": "Registry",
        "in": [],
        "out": [
            {
                "x": 200,
                "y": 40,
                "wires": [
                    {
                        "id": "b15f018fae453d3b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-cubes"
    },
    {
        "id": "b15f018fae453d3b",
        "type": "function",
        "z": "50dd3bd392e226e0",
        "name": "Registry",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "global.set(\"registry\", null);\n\nclass AsyncStore {\n    Items = {};\n    ItemsPromises = {};\n    ItemsResolvers = {};\n\n    Add(id, item) {\n        this.Items[id] = item;\n\n        if (id in this.ItemsPromises) {\n            this.ItemsResolvers[id].resolve(item);\n            delete this.ItemsPromises[id];\n            delete this.ItemsResolvers[id];\n        }\n    }\n\n    Get(id) {\n        if (id in this.Items) {\n            return Promise.resolve(this.Items[id]);\n        }\n        if (id in this.ItemsPromises) {\n            return this.ItemsPromises[id];\n        }\n\n        let promise = new Promise((resolve, reject) => {\n            this.ItemsResolvers[id] = {\n                resolve: resolve,\n                reject: reject,\n            }\n        });\n\n        this.ItemsPromises[id] = promise;\n        return promise;\n    }\n}\n\nclass Registry {\n    Types = new AsyncStore();\n    Instances = new AsyncStore();\n\n    register(id, type) {\n        this.Types.Add(id, type);\n    }\n\n    get(id) {\n        return Promise.race([\n            this.Types.Get(id),\n            new Promise((resolve, reject) => {\n                setTimeout(() => reject(`Type not found: ${id}`), 5000);\n            })\n        ]);\n    }\n\n    getAll(...ids) {\n        let promises = [];\n        ids.forEach(id => promises.push(this.get(id)));\n        return Promise.all(promises);\n    }\n\n    registerInstance(id, instance) {\n        this.Instances.Add(id, instance);\n    }\n\n    getInstance(id) {\n        return this.Instances.Get(id);\n    }\n\n    async resolveDependencies(instance) {\n        let promises = [];\n\n        for (const key in instance) {\n            if (instance[key] instanceof this.Require === false) continue;\n            \n            promises.push(\n                this.getInstance(instance[key].id)\n                    .then(target => instance[key] = target)\n            );\n        }\n\n        await Promise.all(promises);\n        return instance;\n    }\n\n    Require = class {\n        constructor(id) {\n            this.id = id;\n        }\n    }\n}\n\nlet registry = new Registry();\nglobal.set(\"registry\", registry);\nnode.send({});",
        "finalize": "",
        "libs": [
            {
                "var": "events",
                "module": "events"
            }
        ],
        "x": 80,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "387c4c2422591430",
        "type": "subflow",
        "name": "Instance",
        "info": "",
        "category": "Registry",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "5abbd199dfe8ea2f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 40,
                "wires": [
                    {
                        "id": "5abbd199dfe8ea2f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "name",
                "type": "str",
                "value": "MqttService"
            },
            {
                "name": "type",
                "type": "str",
                "value": ""
            },
            {
                "name": "args",
                "type": "json",
                "value": "{}"
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-cube",
        "status": {
            "x": 320,
            "y": 80,
            "wires": [
                {
                    "id": "a908b29eb5cced80",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "5abbd199dfe8ea2f",
        "type": "function",
        "z": "387c4c2422591430",
        "name": "Instance",
        "func": "let $ = global.get(\"registry\");\nlet Type = await $.get(env.get(\"type\"));\n\ntry {\n    let instance = new Type();\n    instance.init(Object.assign({ node }, env.get(\"args\")));\n    $.registerInstance(env.get(\"name\"), instance);\n\n    return msg;\n} catch (e) {\n    node.error(e.stack);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "mqtt",
                "module": "mqtt"
            }
        ],
        "x": 180,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "a908b29eb5cced80",
        "type": "status",
        "z": "387c4c2422591430",
        "name": "",
        "scope": [
            "5abbd199dfe8ea2f"
        ],
        "x": 180,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ffb5227f5ff229e9",
        "type": "subflow",
        "name": "Property",
        "info": "",
        "category": "Registry",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "fbd74d94dc726844"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "path",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#FFFFFF",
        "icon": "node-red/comment.svg",
        "status": {
            "x": 200,
            "y": 100,
            "wires": [
                {
                    "id": "7e218dc0a6e067ea",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "fbd74d94dc726844",
        "type": "function",
        "z": "ffb5227f5ff229e9",
        "name": "Subscribe",
        "func": "let $ = global.get(\"registry\");\nlet target = await $.getInstance(msg.payload);\n\nconst expand = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\ntarget = expand(target, env.get(\"path\"))\ntarget.on(\"status\", data => node.status(data));\nnode.status(target.status);",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "7e218dc0a6e067ea",
        "type": "status",
        "z": "ffb5227f5ff229e9",
        "name": "",
        "scope": [
            "fbd74d94dc726844"
        ],
        "x": 80,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "6921f1f3fbfe8775",
        "type": "subflow",
        "name": "Set",
        "info": "",
        "category": "Registry",
        "in": [
            {
                "x": 40,
                "y": 120,
                "wires": [
                    {
                        "id": "8c32106737a3832c"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "node",
                "type": "str",
                "value": ""
            },
            {
                "name": "path",
                "type": "str",
                "value": ""
            },
            {
                "name": "mode",
                "type": "str",
                "value": "command",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Command"
                                },
                                "v": "command"
                            },
                            {
                                "l": {
                                    "en-US": "Set"
                                },
                                "v": "set"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#F3B567",
        "icon": "font-awesome/fa-wrench"
    },
    {
        "id": "61690c152b0059d3",
        "type": "function",
        "z": "6921f1f3fbfe8775",
        "name": "Node",
        "func": "let $ = global.get(\"registry\");\nconst expand = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\nlet target = await $.getInstance(env.get(\"node\"));\ntarget = expand(target, env.get(\"path\"))\n\nflow.set(\"target\", target);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "8c32106737a3832c",
        "type": "function",
        "z": "6921f1f3fbfe8775",
        "name": "Trigger",
        "func": "let target = flow.get(\"target\");\n\nif (!target) return null;\n\nif (env.get(\"mode\") === \"command\")\n    target.command(msg.payload);\nelse\n    target.set(msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "bc3a6b338c07c4f1",
        "type": "subflow:2f546c91f509d875",
        "z": "6921f1f3fbfe8775",
        "name": "",
        "x": 35,
        "y": 40,
        "wires": [
            [
                "61690c152b0059d3"
            ]
        ],
        "l": false
    },
    {
        "id": "2f546c91f509d875",
        "type": "subflow",
        "name": "Initialized",
        "info": "",
        "category": "Registry",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "d0b553f88ea4af86"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 200,
                "y": 40,
                "wires": [
                    {
                        "id": "d7871eaf306d0121",
                        "port": 0
                    },
                    {
                        "id": "d0b553f88ea4af86",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "trigger",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "en-US": "Send initial message"
                    },
                    "type": "checkbox"
                }
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-hourglass-start"
    },
    {
        "id": "d7871eaf306d0121",
        "type": "function",
        "z": "2f546c91f509d875",
        "name": "Init",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let interval;\n\ninterval = setInterval(() => {\n    let $ = global.get(\"registry\");\n    if ($ !== null && $ !== undefined) {\n        clearInterval(interval);\n        if (env.get(\"trigger\"))\n            node.send({});\n        let buffer = flow.get(\"buffer\") || [];\n        buffer.forEach(msg => node.send(msg));\n    }\n}, 100);",
        "finalize": "",
        "libs": [],
        "x": 70,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d0b553f88ea4af86",
        "type": "function",
        "z": "2f546c91f509d875",
        "name": "Buffer",
        "func": "let registry = global.get(\"registry\");\nif (registry) return msg;\n\nlet buffer = flow.get(\"buffer\") || [];\nbuffer.push(msg);\nflow.set(\"buffer\", buffer);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 115,
        "y": 40,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "879948f81429fbc8",
        "type": "subflow",
        "name": "Changed",
        "info": "",
        "category": "Registry",
        "in": [],
        "out": [
            {
                "x": 260,
                "y": 40,
                "wires": [
                    {
                        "id": "4d91d53ef6912666",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "node",
                "type": "str",
                "value": ""
            },
            {
                "name": "path",
                "type": "str",
                "value": ""
            },
            {
                "name": "mode",
                "type": "str",
                "value": "changed",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Changed"
                                },
                                "v": "changed"
                            },
                            {
                                "l": {
                                    "en-US": "Command"
                                },
                                "v": "command"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#F3B567",
        "icon": "font-awesome/fa-flash"
    },
    {
        "id": "4d91d53ef6912666",
        "type": "function",
        "z": "879948f81429fbc8",
        "name": "Node",
        "func": "let $ = global.get(\"registry\");\nconst expand = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\nlet target = await $.getInstance(env.get(\"node\"));\ntarget = expand(target, env.get(\"path\"))\n\ntarget.on(env.get(\"mode\"), data => {\n    if (env.get(\"mode\") === \"changed\") data = data.to;\n    node.send({payload: data});\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "2ce0cc56fde999bd",
        "type": "subflow:2f546c91f509d875",
        "z": "879948f81429fbc8",
        "name": "",
        "x": 35,
        "y": 40,
        "wires": [
            [
                "4d91d53ef6912666"
            ]
        ],
        "l": false
    },
    {
        "id": "39f787a95ab13d80",
        "type": "subflow:879948f81429fbc8",
        "z": "91775881b3da3910",
        "name": "",
        "x": 35,
        "y": 40,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "6d9d7542c01cafca",
        "type": "subflow:6921f1f3fbfe8775",
        "z": "91775881b3da3910",
        "name": "",
        "x": 95,
        "y": 40,
        "wires": [],
        "l": false
    },
    {
        "id": "640c48c1831986af",
        "type": "subflow:ffb5227f5ff229e9",
        "z": "91775881b3da3910",
        "name": "",
        "x": 155,
        "y": 40,
        "wires": [],
        "l": false
    },
    {
        "id": "1570dd7a319684f0",
        "type": "subflow:2f546c91f509d875",
        "z": "91775881b3da3910",
        "name": "",
        "x": 35,
        "y": 80,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "131b3f30ab2ce0e6",
        "type": "subflow:387c4c2422591430",
        "z": "91775881b3da3910",
        "name": "",
        "x": 155,
        "y": 80,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "ad7297b549e04189",
        "type": "subflow:50dd3bd392e226e0",
        "z": "91775881b3da3910",
        "name": "",
        "x": 95,
        "y": 80,
        "wires": [
            []
        ],
        "l": false
    }
]
