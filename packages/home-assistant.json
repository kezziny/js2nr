[
    {
        "id": "1f37d883bc3db1d3",
        "type": "subflow",
        "name": "Hass",
        "info": "",
        "category": "Packages",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "d27565c0f079a83c"
                    },
                    {
                        "id": "129b412771608d9e"
                    },
                    {
                        "id": "fcbbb257b537d0ee"
                    },
                    {
                        "id": "94a7365ba49ae666"
                    },
                    {
                        "id": "3c23c2fc78024565"
                    },
                    {
                        "id": "30e3187deb96a813"
                    },
                    {
                        "id": "51ef6e6af78f7ca4"
                    },
                    {
                        "id": "f124648068c557bd"
                    },
                    {
                        "id": "b839f14bbf95aead"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#03a9f4",
        "icon": "font-awesome/fa-home"
    },
    {
        "id": "d27565c0f079a83c",
        "type": "function",
        "z": "1f37d883bc3db1d3",
        "name": "BinarySensor",
        "func": "let $ = global.get(\"registry\");\nlet Property = await $.get(\"Property\");\n\nclass BinarySensor extends Property {\n    set(value) {\n        if (typeof value === \"string\") value = value.toLocaleLowerCase() === \"on\";\n        value = !!value;\n        super.set(value);\n    }\n\n    changed(value) {\n        if (value) this.green(\"\");\n        else this.red(\"\");\n    }\n\n    command(value) {\n        throw new Error(\"BinarySensor is not commandable\");\n    }\n}\n\n$.register(\"Hass.BinarySensor\", BinarySensor);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "events",
                "module": "events"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "129b412771608d9e",
        "type": "function",
        "z": "1f37d883bc3db1d3",
        "name": "Sensor",
        "func": "let $ = global.get(\"registry\");\nlet Property = await $.get(\"Property\");\n\nclass Sensor extends Property {\n    changed(value) {\n        this.green(\"\" + value);\n    }\n}\n\n$.register(\"Hass.Sensor\", Sensor);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "events",
                "module": "events"
            }
        ],
        "x": 180,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "fcbbb257b537d0ee",
        "type": "function",
        "z": "1f37d883bc3db1d3",
        "name": "Light",
        "func": "let $ = global.get(\"registry\");\nlet Property = await $.get(\"Property\");\nlet Switch = await $.get(\"Hass.Switch\");\nlet Sensor = await $.get(\"Hass.Sensor\");\n\nclass Light extends Property.Group {\n    constructor() {\n        super({\n            \"State\": new Switch(),\n            \"Brightness\": new Sensor(),\n            \"Kelvin\": new Sensor()\n        });\n    }\n\n    changed() {\n        if (this.State.value) this.green(`${this.Brightness.value}%`);\n        else this.red(\"Off\");\n    }\n}\n\n$.register(\"Hass.Light\", Light);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "events",
                "module": "events"
            }
        ],
        "x": 170,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "94a7365ba49ae666",
        "type": "function",
        "z": "1f37d883bc3db1d3",
        "name": "Switch",
        "func": "let $ = global.get(\"registry\");\nlet Property = await $.get(\"Property\");\nlet BinarySensor = await $.get(\"Hass.BinarySensor\");\n\nclass Switch extends BinarySensor {\n    changed(value) {\n        if (value) this.green(\"On\");\n        else this.red(\"Off\");\n    }\n\n    command(value) {\n        if (typeof value === \"string\") value = value.toLocaleLowerCase() === \"on\";\n        value = !!value;\n        Property.prototype.command.call(this, value);\n    }\n}\n\n$.register(\"Hass.Switch\", Switch);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "events",
                "module": "events"
            }
        ],
        "x": 170,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "3c23c2fc78024565",
        "type": "function",
        "z": "1f37d883bc3db1d3",
        "name": "Cover",
        "func": "let $ = global.get(\"registry\");\nlet Property = await $.get(\"Property\");\nlet Switch = await $.get(\"Hass.Switch\");\nlet Sensor = await $.get(\"Hass.Sensor\");\n\nclass Cover extends Property.Group {\n    constructor() {\n        super({\n            \"State\": new Sensor(),\n            \"Position\": new Sensor()\n        });\n    }\n\n    changed() {\n        if (this.State.value === \"open\")\n            this.green(`${this.Position.value}%`);\n        else\n            this.red(`${this.Position.value}%`);\n    }\n}\n\n$.register(\"Hass.Cover\", Cover);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "events",
                "module": "events"
            }
        ],
        "x": 170,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "30e3187deb96a813",
        "type": "function",
        "z": "1f37d883bc3db1d3",
        "name": "Action",
        "func": "let $ = global.get(\"registry\");\nlet Property = await $.get(\"Property\");\n\nclass Action extends Property {\n    changed(value) {\n        this.green(\"\" + value);\n    }\n}\n\n$.register(\"Hass.Action\", Action);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "events",
                "module": "events"
            }
        ],
        "x": 170,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "51ef6e6af78f7ca4",
        "type": "function",
        "z": "1f37d883bc3db1d3",
        "name": "Hass.*",
        "func": "let $ = global.get(\"registry\");\nlet BinarySensor = await $.get(\"Hass.BinarySensor\");\nlet NumericState = await $.get(\"Hass.Number\");\nlet Sensor = await $.get(\"Hass.Sensor\");\nlet Light = await $.get(\"Hass.Light\");\nlet Switch = await $.get(\"Hass.Switch\");\nlet Cover = await $.get(\"Hass.Cover\");\nlet Action = await $.get(\"Hass.Action\");\n\nclass Hass {\n    static BinarySensor = BinarySensor;\n    static Number = NumericState;\n    static Sensor = Sensor;\n    static Light = Light;\n    static Switch = Switch;\n    static Cover = Cover;\n    static Action = Action;\n}\n\n$.register(\"Hass.*\", Hass);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "events",
                "module": "events"
            }
        ],
        "x": 170,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f124648068c557bd",
        "type": "function",
        "z": "1f37d883bc3db1d3",
        "name": "Plugin",
        "func": "let $ = global.get(\"registry\");\nlet Plugin = await $.get(\"Plugin\");\nlet Property = await $.get(\"Property\");\nlet Hass = await $.get(\"Hass.*\");\nlet MqttService = await $.get(\"Mqtt.Service\");\nlet MqttPlugin = await $.get(\"Mqtt.Plugin\");\n\nclass HassPlugin extends Plugin {\n    mqttService = new Plugin.Argument({ required: true, type: MqttService });\n    discoveryTopic = new Plugin.Argument({required: true, default: \"homeassistant\", type: \"string\"});\n    home = new Plugin.Argument({ required: true, default: \"Home\", type: \"string\" });\n    room = new Plugin.Argument({ required: true, default: \"Home\", type: \"string\" });\n\n    mqtt;\n\n    init(args) {\n        super.init(args);\n        this.mqtt = new MqttPlugin();\n        this.mqtt.init({ target: this.target, mqttService: this.mqttService });\n    }\n\n    publish(args) {\n        args = publishSchema.eval(args);\n        if (!args.properties) args.properties = {};\n\n        let mqttProperties = {};\n        let device = this.device(args.name);\n\n        if (args.group instanceof Hass.Light) {\n            const config = this.light(Object.assign({ device, state_topic: args.topic, name: args.name }, args.properties));\n            this.mqttService.publish({ topic: `${this.discoveryTopic}/light/${config.unique_id}/config`, payload: config, retain: true });\n        } \n        else\n        if (args.group instanceof Hass.Cover) {\n            const config = this.cover(Object.assign({ device, state_topic: args.topic, name: args.name }, args.properties));\n            this.mqttService.publish({ topic: `${this.discoveryTopic}/cover/${config.unique_id}/config`, payload: config, retain: true });\n        } \n        else\n        {\n            for (const key in args.group) {\n                let property = args.group[key];\n                let topic = args.topic;\n                \n                if (args.separateTopics) {\n                    topic += \"/\" + key;\n                    mqttProperties[key] = {topic};\n                }\n\n                if (property instanceof Hass.Switch) {\n                    const config = this.switch(Object.assign({ device, state_topic: topic, name: key }, args.properties[key]));\n                    this.mqttService.publish({ topic: `${this.discoveryTopic}/switch/${config.unique_id}/config`, payload: config, retain: true });\n                } \n                else\n                if (property instanceof Hass.Sensor) {\n                    const config = this.sensor(Object.assign({ device, state_topic: topic, name: key }, args.properties[key]));\n                    this.mqttService.publish({ topic: `${this.discoveryTopic}/sensor/${config.unique_id}/config`, payload: config, retain: true });\n                }\n                else\n                if (property instanceof Hass.BinarySensor) {\n                    const config = this.binarySensor(Object.assign({ device, state_topic: topic, name: key }, args.properties[key]));\n                    this.mqttService.publish({ topic: `${this.discoveryTopic}/binary_sensor/${config.unique_id}/config`, payload: config, retain: true });\n                }\n                else\n                if (property instanceof Hass.Number) {\n                    const config = this.numericState(Object.assign({ device, state_topic: topic, name: key }, args.properties[key]));\n                    this.mqttService.publish({ topic: `${this.discoveryTopic}/number/${config.unique_id}/config`, payload: config, retain: true });\n                }\n            }\n        }\n\n        this.mqtt.publish({\n            topic: args.topic,\n            group: args.group,\n            retain: true,\n            restore: args.restore\n        });\n    }\n\n    notNulls(o) {\n        for (const key in o) {\n            if (o[key] === null) delete o[key];\n        }\n        return o;\n    }\n\n    device(name) {\n        let area = `${this.home}/${this.room}`;\n        let id = `${area}/${name}`.replaceAll('/', '_').replaceAll(' ', '');\n\n        return {\n            \"identifiers\": [id],\n            \"name\": name,\n            \"suggested_area\": area,\n            \"model\": `SmartHut ${name}`,\n            \"manufacturer\": \"SmartHut\",\n            \"sw_version\": \"1.0.0\",\n        };\n    }\n\n    entityBase(args) {\n        args = entityBaseSchema.eval(args);\n        let device_id = args.device.identifiers[0];\n\n        return {\n            name: `${args.name}`,\n            unique_id: `${device_id}_${args.name}`,\n            object_id: `${device_id}_${args.name}`,\n            device: args.device,\n        };\n    }\n\n    sensor(args) {\n        let entityBase = this.entityBase(args);\n        args = sensorSchema.eval(args);\n        if (!args.value_template) args.value_template = `{{ value_json.${args.name} }}`;\n\n        return this.notNulls( Object.assign(entityBase, {\n            device_class: args.device_class,\n            state_class: args.state_class,\n            unit_of_measurement: args.unit,\n            state_topic: args.state_topic,\n            value_template: args.value_template,\n        }));\n    }\n\n    numericState(args) {\n        let entityBase = this.entityBase(args);\n        args = numberSchema.eval(args);\n        if (!args.command_topic) args.command_topic = `${args.state_topic}/set`;\n        if (!args.command_template) args.command_template = `{ \"${args.name}\": {{ value }} }`;\n        if (!args.value_template) args.value_template = `{{ value_json.${args.name} }}`;\n        \n        return this.notNulls(Object.assign(entityBase, {\n            device_class: args.device_class,\n            state_class: args.state_class,\n            unit_of_measurement: args.unit,\n            state_topic: args.state_topic,\n            value_template: args.value_template,\n            command_topic: args.command_topic,\n            command_template: args.command_template,\n            mode: args.mode,\n        }));\n    }\n\n    binarySensor(args) {\n        let entityBase = this.entityBase(args);\n        args = binarySensorSchema.eval(args);\n        if (!args.value_template) args.value_template = `{{ value_json.${args.name} }}`;\n\n        return this.notNulls(Object.assign(entityBase, {\n            device_class: args.device_class,\n            unit_of_measurement: args.unit,\n            state_topic: args.state_topic,\n            value_template: args.value_template,\n            payload_on: args.payload_on,\n            payload_off: args.payload_off\n        }));\n    }\n\n    switch(args) {\n        let entityBase = this.entityBase(args);\n        args = sensorSchema.eval(args);\n        if (!args.command_topic) args.command_topic = `${args.state_topic}/set`;\n        if (!args.payload_on) args.payload_on = `{ \"${args.name}\": true }`;\n        if (!args.payload_off) args.payload_off = `{ \"${args.name}\": false }`;\n        if (!args.value_template) args.value_template = `{{ value_json.${args.name} }}`;\n\n        return this.notNulls(Object.assign(entityBase, {\n            device_class: args.device_class,\n            state_topic: args.state_topic,\n            command_topic: args.command_topic,\n            value_template: args.value_template,\n            state_on: true,\n            state_off: false,\n            payload_on: `{ \"${args.name}\": true }`,\n            payload_off: `{ \"${args.name}\": false }`,\n        }));\n    }\n\n    light(args) {\n        let entityBase = this.entityBase(args);\n        args = lightSchema.eval(args);\n        \n        if (!args.command_topic) args.command_topic = `${args.state_topic}/set`;\n        if (!args.state_template) args.state_template = `\n            {% if value_json.State %}\n                on\n            {% else %}\n                off\n            {% endif %}`;\n        if (!args.brightness_template) args.brightness_template = `{{ value_json.Brightness | float | multiply(2.55) | round(0) }}`;\n        if (!args.color_temp_template) args.color_temp_template = `{{ (1000000 / value_json.Kelvin | float) | round(0) }}`;\n        if (!args.command_on_template) args.command_on_template = `{ \n            \"State\": true\n            {%- if brightness is defined -%}\n            , \"Brightness\": {{brightness | float | multiply(0.39215686) | round(0)}}\n            {%- endif -%}\n            {%- if color_temp is defined -%}\n            , \"Kelvin\": {{ [[(1000000 / color_temp | float) | round(0), 3000] | max, 6500] | min }}\n            {%- endif -%}\n            }`;\n        if (!args.command_off_template) args.command_off_template = `{ \"State\": false }`;\n        if (!args.brightness_command_template) args.brightness_command_template = `{ \"Brightness\": {{ value }} }`;\n        if (!args.color_temp_command_template) args.color_temp_command_template = `{ \"Kelvin\": {{ 1000000 / value }} }`;\n\n        delete args[\"name\"]\n        delete args[\"device\"]\n        return this.notNulls(Object.assign(entityBase, { schema: \"template\"}, args));\n    }\n\n    cover(args) {\n        let entityBase = this.entityBase(args);\n        args = coverSchema.eval(args);\n        if (!args.command_topic) args.command_topic = `${args.state_topic}/set`;\n\n        delete args[\"name\"]\n        delete args[\"device\"]\n        return this.notNulls(Object.assign(entityBase, {\n            position_topic: args.state_topic,\n            set_position_topic: args.command_topic,\n        }, args));\n    }\n\n    alarm(args) {\n        let sensor = {\n            name: `${args.name}`,\n            unique_id: `${msg.prefix}_${args.name}`,\n            object_id: `${msg.prefix}_${args.name}`,\n            device: msg.payload,\n            state_topic: msg.topic,\n            command_topic: `${msg.topic}/set`,\n            value_template: `{{ value_json.${args.name} }}`,\n            command_template: `{ \"${args.name}\": { \"to\": \"{{ action }}\" } }`\n        }\n    }\n}\n\nconst publishSchema = new Plugin.ArgumentMap({\n    name: { required: true, type: \"string\" },\n    topic: { required: true, type: \"string\" },\n    separateTopics: {required: true, default: false, type: \"boolean\" },\n    restore: { required: true, default: false, type: \"boolean\" },\n    group: { required: true, type: Property.Group },\n    properties: { required: false },\n});\n\nconst entityBaseSchema = new Plugin.ArgumentMap({\n    device: { required: true },\n    name: { required: true, type: \"string\" },\n});\n\nconst sensorSchema = new Plugin.ArgumentMap({\n    device_class: { required: false, type: \"battery|current|data_rate|distance|energy|frequency|gas|humidity|illuminance|moisture|power|pressure|signal_strength|temperature|voltage\" },\n    state_topic: { required: true, type: \"string\" },\n    state_class: { required: true, default: \"measurement\", type: \"measurement|total|total_increasing\" },\n    unit: { required: false, type: \"string\" },\n    value_template: { required: false, type: \"string\" },\n});\n\nconst numberSchema = new Plugin.ArgumentMap({\n    device_class: { required: false, type: \"battery|current|data_rate|distance|energy|frequency|gas|humidity|illuminance|moisture|power|pressure|signal_strength|temperature|voltage\" },\n    state_topic: { required: true, type: \"string\" },\n    command_topic: { required: false, type: \"string\" },\n    command_template: { required: false, type: \"string\" },\n    mode: { required: true, default: \"box\", type: \"slider|box\"},\n    unit: { required: false, type: \"string\" },\n    value_template: { required: false, type: \"string\" },\n});\n\nconst binarySensorSchema = new Plugin.ArgumentMap({\n    device_class: { required: false, type: \"door|garage_door|lock|motion|occupancy|opening|power|presence|problem|window\" },\n    state_topic: { required: true, type: \"string\" },\n    unit: { required: false, type: \"string\" },\n    payload_on: { required: true, default: true },\n    payload_off: { required: true, default: false },\n    value_template: { required: false, type: \"string\" },\n});\n\nconst switchSchema = new Plugin.ArgumentMap({\n    device_class: { required: false, type: \"outlet|switch\" },\n    state_topic: { required: true, type: \"string\" },\n    command_topic: { required: false, type: \"string\" },\n    payload_on: { required: false, type: \"string\" },\n    payload_off: { required: false, type: \"string\" },\n    value_template: { required: false, type: \"string\" },\n});\n\nconst lightSchema = new Plugin.ArgumentMap({\n    state_topic: { required: true, type: \"string\" },\n    command_topic: { required: false, type: \"string\" },\n    state_template: { required: false, type: \"string\" },\n    brightness_template: { required: false, type: \"string\" },\n    color_temp_template: { required: false, type: \"string\" },\n    command_on_template: { required: false, type: \"string\" },\n    command_off_template: { required: false, type: \"string\" },\n    brightness_command_template: { required: false, type: \"string\" },\n    color_temp_command_template: { required: false, type: \"string\" },\n});\n\nconst coverSchema = new Plugin.ArgumentMap({\n    device_class: { required: false, type: \"blind|curtain|door|garage|gate|shade|shutter|window\" },\n    state_topic: { required: true, type: \"string\" },\n    position_open: { required: true, default: 0, type: \"number\" },\n    position_closed: { required: true, default: 100, type: \"number\" },\n    set_position_template: { required: true, default: '{ \"Position\": {{ 100 - position }} }', type: \"text\" },\n    payload_open: { required: true, default: '{ \"State\": \"open\" }', type: \"text\" },\n    payload_stop: { required: true, default: '{ \"State\": \"stop\" }', type: \"text\" },\n    payload_close: { required: true, default: '{ \"State\": \"close\" }', type: \"text\" },\n    state_open: { required: true, default: \"open\", type: \"text\" },\n    state_opening: { required: true, default: \"opening\", type: \"text\" },\n    state_stopped: { required: true, default: \"stopped\", type: \"text\" },\n    state_closed: { required: true, default: \"closed\", type: \"text\" },\n    state_closing: { required: true, default: \"closing\", type: \"text\" },\n    value_template: { required: true, default: \"{{ value_json.State }}\", type: \"string\" },\n    position_template: { required: true, default: \"{{ value_json.Position }}\", type: \"string\" },\n});\n\n$.register(\"Hass.Plugin\", HassPlugin);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "mqtt",
                "module": "mqtt"
            }
        ],
        "x": 430,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "b839f14bbf95aead",
        "type": "function",
        "z": "1f37d883bc3db1d3",
        "name": "Number",
        "func": "let $ = global.get(\"registry\");\nlet Property = await $.get(\"Property\");\n\nclass NumericState extends Property {\n    changed(value) {\n        this.green(\"\" + value);\n    }\n}\n\n$.register(\"Hass.Number\", NumericState);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "events",
                "module": "events"
            }
        ],
        "x": 180,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "1f67d60853134101",
        "type": "subflow:1f37d883bc3db1d3",
        "z": "445c4687a8d966bb",
        "name": "",
        "x": 170,
        "y": 80,
        "wires": []
    }
]
